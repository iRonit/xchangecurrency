plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'com.diffplug.spotless' version '6.9.0'
}

group = 'com.xchangecurrency'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

// JaCoCo
jacoco {
    toolVersion = "0.8.8"
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/xchangecurrency/**/CurrencyExchangeApiApplication.class",
                    "**/configs/*",
                    "**/dtos/*",
                    "**/errorhandling/*"
            ])
        }))
    }
    reports {
        xml.enabled true
    }
}

// Sonarqube
sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'ironit'
        property 'sonar.projectKey', 'xchangecurrency'
    }
}

// Spotless
spotless {
    // Optional: limit format enforcement to just the files changed by this feature branch
    // ratchetFrom 'origin/master'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }

    java {
        endWithNewline()
        removeUnusedImports()
        toggleOffOn()
        eclipse().configFile('.formatter/eclipse_formatter.xml')
        licenseHeaderFile('.formatter/license-header')
    }

    compileJava.dependsOn 'spotlessCheck'
}
